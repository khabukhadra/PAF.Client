@page "/register"
@using PAF.MobileApp.Models
@using PAF.MobileApp.Services

@inject NavigationManager NavigationManager
@inject IAuthService AuthService
@inject IFreelancerService freelancerService;


<div class="container p-4" style="width: 100%; height: 100vh;">
    <h1 class="display-4 mb-5">Register</h1>
    <EditForm Model="@registerModel" OnValidSubmit="HandleRegister">
        <DataAnnotationsValidator />
        <ValidationSummary class="fs-4" />

        <div class="form-group mb-4">
            <label for="username" class="form-label fs-3 mb-3">Username</label>
            <InputText id="username" class="form-control form-control-lg fs-3 p-3" @bind-Value="registerModel.Username" />
            <ValidationMessage class="fs-4" For="@(() => registerModel.Username)" />
        </div>

        <div class="form-group mb-4">
            <label for="password" class="form-label fs-3 mb-3">Password</label>
            <InputText type="password" id="password" class="form-control form-control-lg fs-3 p-3" @bind-Value="registerModel.Password" />
            <ValidationMessage class="fs-4" For="@(() => registerModel.Password)" />
        </div>

        <div class="form-group mb-4">
            <label for="firstName" class="form-label fs-3 mb-3">First Name</label>
            <InputText id="firstName" class="form-control form-control-lg fs-3 p-3" @bind-Value="registerModel.FirstName" />
            <ValidationMessage class="fs-4" For="@(() => registerModel.FirstName)" />
        </div>

        <div class="form-group mb-4">
            <label for="lastName" class="form-label fs-3 mb-3">Last Name</label>
            <InputText id="lastName" class="form-control form-control-lg fs-3 p-3" @bind-Value="registerModel.LastName" />
            <ValidationMessage class="fs-4" For="@(() => registerModel.LastName)" />
        </div>

        <div class="form-group mb-4">
            <label for="latitude" class="form-label fs-3 mb-3">Latitude</label>
            <InputNumber TValue="double" id="latitude" class="form-control form-control-lg fs-3 p-3" @bind-Value="registerModel.Latitude" />
            <ValidationMessage class="fs-4" For="@(() => registerModel.Latitude)" />
        </div>

        <div class="form-group mb-4">
            <label for="longitude" class="form-label fs-3 mb-3">Longitude</label>
            <InputNumber TValue="double" id="longitude" class="form-control form-control-lg fs-3 p-3" @bind-Value="registerModel.Longitude" />
            <ValidationMessage class="fs-4" For="@(() => registerModel.Longitude)" />
        </div>

        <div class="form-group mb-4">
            <label for="phoneNumber" class="form-label fs-3 mb-3">Phone Number</label>
            <InputText id="phoneNumber" class="form-control form-control-lg fs-3 p-3" @bind-Value="registerModel.PhoneNumber" />
            <ValidationMessage class="fs-4" For="@(() => registerModel.PhoneNumber)" />
        </div>

        <h3 class="fs-2 mb-4">Are you a freelancer?</h3>
        
        <div class="form-group mb-4">
            <label for="sel" class="form-label fs-3 mb-3">Expertise:</label>
            <select id="sel" class="form-select form-select-lg fs-3 p-3" @onchange="Selected">
                <option value=0></option>
                @foreach (var item in Expertises.Items)
                {
                    <option value=@item.Id>@item.ExpertiseName</option>
                }
            </select>
        </div>

        <div class="form-group mb-4">
            <label for="rate" class="form-label fs-3 mb-3">Rate</label>
            <InputNumber TValue="double?" id="rate" class="form-control form-control-lg fs-3 p-3" @bind-Value="registerModel.HourlyRate" />
            <ValidationMessage class="fs-4" For="@(() => registerModel.HourlyRate)" />
        </div>

        @if (ErrorList.Any())
        {
            <div class="alert alert-danger fs-4 p-4 mb-4" role="alert">
                @foreach (var error in ErrorList) 
                {
                    <div class="mb-2">
                        @error
                    </div>
                }
            </div>
        }
        
        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="alert alert-danger fs-4 p-4 mb-4" role="alert">
                @errorMessage
            </div>
        }
        
        <button type="submit" class="btn btn-outline-primary btn-lg fs-3 p-3" style="width: 100%">
            Register
        </button>
    </EditForm>
</div>

@code {
    private RegisterModel registerModel = new();
    private RegisterResponse registerResponse = new();

    private string errorMessage = string.Empty;
    private List<string> ErrorList { get; set; } = new();

    public Expertises Expertises { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        Expertises = await freelancerService.GetExpertisesAsync();
    }

    private async Task Selected(ChangeEventArgs e)
    {
        if (e.Value?.ToString() != "0" && e.Value != null)  // Add null check
        {
            var expertise = Expertises.Items.Single(expertise => expertise.Id.ToString() == e.Value.ToString());
            registerModel.ExpertiseName = expertise.ExpertiseName;
        }
        else
        {
            registerModel.ExpertiseName = null;
        }
    }

    private async Task HandleRegister()
    {
        try
        {
            errorMessage = string.Empty;
            ErrorList.Clear();
            
            registerResponse = await AuthService.RegisterAsync(registerModel);

            if (registerResponse.Success)
            {
                NavigationManager.NavigateTo("/login");
            }
            else
            {
                foreach (var error in registerResponse.Errors)
                {
                    ErrorList.Add(error.Description);
                }
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            errorMessage = "An error occurred during registration. Please try again.";
                    Console.WriteLine($"Registration error: {ex.Message}"); 

        }
    }
}